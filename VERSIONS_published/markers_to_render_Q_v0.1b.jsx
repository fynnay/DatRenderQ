{/*Markers To Render QueueCopyright (c) 2015 Fynn Lauehttp://fynnlaue.comMany thanks to :Dan Ebberts. For having answers to almost everything on the Forums.    Markers To Render Queue is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    Markers To Render Queue is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    To see the GNU General Public License, go to <http://www.gnu.org/licenses/>.*//////////////////////////////////////////////////////////////////////////////////////////////////	BASIC CHECKINGS//	basic global variables needed throughout the script///////////////////////////////////////////////////////////////////////////////////////////////var projectFile;var projectName;var projectDir;function getProjectInfo(){	projectFile = app.project.file!=null?app.project.file:false;	if(projectFile!=false){		projectName = File.decode(app.project.file.name);		projectDir = projectFile.fsName.slice(0,projectFile.fsName.length-projectName.length);		return true;	}else{		return false;	}}getProjectInfo();//var thisComp = app.project.activeItem;var prefs = app.preferences.getPrefAsString("Main Pref Section v2","Pref_SCRIPTING_FILE_NETWORK_SECURITY");/////////////////////////////////////////////////////////////////////////////////////////////////	RENDER OUTPUT SETTINGS//		- the add render Items function calls the following functions if certain settings apply///////////////////////////////////////////////////////////////////////////////////////////////var renderQ = app.project.renderQueue;var renderLoc;var renderMarkers = []; //contains marker's position and comment textvar outputModuleT = '';var renderSingleFrame = false;function setDefaultOutput(){	var fold = new Folder(projectDir+'/'+'renders');	if (fold.exists==false){		writeLn('making new render folder next to project File');		fold.create();	}	return fold.fsName;//if the project has been saved a default folder can be created next to it}function setCustomOutput(){	var renderLoc = new Folder(Folder.selectDialog("Select a render output folder..."));	if (renderLoc!='/null'){		return renderLoc.fsName;	}else{return false};//the user specifies an output folder via pop up dialog or pasting a path in the text field}function createSubDir(parentDir,subName){	var renderLoc = parentDir;	if(renderLoc!='/null'){		var nName = subName; //subname = current marker's name		var fold = new Folder (renderLoc+'/'+nName);		if(fold.exists==true){		}else if(fold.exists==false){			fold.create(); //create new folder, if it doesn't exist yet		}	}	return fold.fsName;//the user can choose to create a new folder for each render item}/////////////////////////////////////////////////////////////////////////////////////////////////	RENDER QUEUE SETTINGS//	render queue settings///////////////////////////////////////////////////////////////////////////////////////////////function clearRenderQ(){	while (renderQ.numItems>0){		renderQ.item(renderQ.numItems).remove()	}//clears Render Queue}/////////////////////////////////////////////////////////////////////////////////////////////////	PSEUDO TIMELINE//		- creates temporary text object with an expression, so the stupid script language can read the comp markers///////////////////////////////////////////////////////////////////////////////////////////////function pseudoTimeline(){	//expression for "source text" property of text layer (temp null):	var thisComp = app.project.activeItem;	var markerExpression = 'var contents = ""; \	for(i=1;i<=thisComp.marker.numKeys;i++){ \		contents = (contents+thisComp.marker.key(i).comment+"#"+thisComp.marker.key(i).time+"/"); \	}; \	"/"+contents;';	var tempNull = thisComp.layers.addText();		tempNull.name = "#MARKER_INFO";		tempNull.property("Source Text").expression = markerExpression;		tempNull.property("Source Text").value.justification = ParagraphJustification.LEFT_JUSTIFY;		tempNull.guideLayer = true;		tempNull.shy = true;		tempNull.duration = thisComp.length;		tempNull.enabled = false;		tempNull.moveToBeginning();		tempNull.selected = false;		tempNull.locked = false;	var markerInfo = tempNull.property("Source Text").value.toString();}/////////////////////////////////////////////////////////////////////////////////////////////////	HOUSEKEEPING//		- Reads pseudoTimeline's contents and put's values in an array (that way the script can read them easily)///////////////////////////////////////////////////////////////////////////////////////////////function housekeeping(){ 	writeLn('housekeeping...');	var thisComp = app.project.activeItem;	var hashes = [];	var slashes = [];	var tempNull = thisComp.layer(1);	var markerInfo = tempNull.property("Source Text").value.toString();	for(i=0;i<markerInfo.length;i++){		var curL = markerInfo.slice(i,i+1);		if(curL=="#"){			hashes.push(i);		}		if(curL=="/"){			slashes.push(i);		}	}	// create markers:	for(i=0;i<hashes.length;i++){		var hashCheck = hashes[i];		var slashCheck = slashes[i];		var markerName = markerInfo.slice(slashCheck+1,hashCheck);		var markerPos = markerInfo.slice(hashCheck+1,slashes[i+1]);		var Lmarker = new MarkerValue(markerName);		tempNull.property("Marker").setValueAtTime(markerPos, Lmarker);	//dis make marker!		renderMarkers.push([markerPos,markerName]);	}//reads text layer's contents and creates markers on null object (that way the script can understand them)}/////////////////////////////////////////////////////////////////////////////////////////////////	ADD RENDER ITEMS//		- reads every entry of the renderMarkers array...//		- ...and adds a new render item with the settings read directly from the UI values///////////////////////////////////////////////////////////////////////////////////////////////function addRenderItems(name,append,output,fileNom){//this is where the magic happens	thisComp = app.project.activeItem;	renderQ = app.project.renderQueue;	function appendFrames(){		var appendF = '[';		var checkLen = (thisComp.duration*thisComp.frameRate).toString().length;		for(f=0;f<checkLen;f++){			appendF = appendF+'#';		}		appendF = appendF+']';		return appendF;	}	var renderQlen = renderQ.numItems;	for(i=0;i<renderMarkers.length;i++){		var thisMarker = renderMarkers[i];		var nextMarker = thisComp.duration;			if(renderMarkers[i+1] != undefined){				nextMarker = renderMarkers[i+1][0];			}else{nextMarker = thisComp.duration;}		var markerTime = thisMarker[0];		var markerName = thisMarker[1];		var duration;			duration = nextMarker-markerTime;		renderQ.items.add(thisComp); //add render item to render Queue			var curItem = renderQ.item(renderQlen+i+1);			var curRenderItem = renderQ.item(renderQ.numItems);			curItem.timeSpanStart = thisMarker[0];			if(renderSingleFrame==true){				curItem.timeSpanDuration = thisComp.frameDuration;			}else{					app.beginSuppressDialogs(); //stop AE from displaying errors to avoid the out of range error					curItem.timeSpanDuration = duration;					app.endSuppressDialogs(false); //let AE display errors again, but don't display previously occured ones			}			var outputName;			//			//	COUNTER			var counter;			if(i<9){				counter = '0'+(i+1);			}else{				counter = i+1;			}			if(fileNom==thisComp.name){				outputName = thisComp.name+'_'+counter;			}else{				outputName = markerName;			}	////////////////////			var appendF = append==true?appendFrames():'';			var outputPath;				if(append!=true){					outputPath=output;				}else{					var makeSubDir = createSubDir(output,markerName);					outputPath=makeSubDir;				};			var newPath = outputPath+'/'+outputName+appendF;			var curOM = curRenderItem.outputModule(1);			curOM.file = new File(newPath);			curOM.applyTemplate(outputModuleT);	}	}							//////////////////////////////////////////							//										//							//										//							//			######	##	##	##			//							//			##		##	##	##			//							//			## ##	##	##	##			//							//			##	##	##	##	##			//							//			######	######	##			//							//										//							//										//							//////////////////////////////////////////function userInterface(thisObj){	var thisComp = app.project.activeItem;	function build_ui(thisObj){		if(thisObj instanceof Panel){			var myPanel = thisObj;		}else{			var myPanel = (thisObj instanceof Panel)? thisObj : new Window("palette", "RenderQ", undefined, {resizable:true});		}		var res =		"group {orientation:'column',alignChildren:['fill','fill'],\			rndrStngsPnl: Panel{ orientation:'column', minimumSize:[100,10], alignChildren:['left','top'],\				text: 'Render...', \				useMrks: RadioButton{text:'Comp Markers',value:'true'},\				stillFrm: Checkbox{text:'Only render each marker’s first frame',value:false}\			}\			outputPnl: Panel { orientation:'column', alignChildren:['left', 'top']\				text: 'Render Location', \				defOut: Group{orientation:'row',alignChildren:['left','top'],\					defOutBtn: RadioButton{text:'use default',value:'true'},\					defOutPth: StaticText{text:'~/Project/renders/'}\				},\				cstmOut: Group{orientation:'row',alignChildren:['left','bottom'],\					cstmOutBtn: RadioButton{text:'use custom'},\					setCstmOut: Button{text:'choose location'}\				}\				cstmPth: EditText{characters:35,justify:'left'} \			}\			outputModPnl: Panel{orientation:'column',alignChildren:['left','top']\				text: 'Output Module',\				outputModMenu: DropDownList{bounds:[left,top,150,10],name:'output module'},\			} \			fileNomPnl: Panel{orientation:'column',alignChildren:['left','top']\				text:'File Name', \				useMrkNom: RadioButton{text:'Use comment from Markers',value:'true'},\				useCompNom: RadioButton{text:'Use name from Comp+counter'},\				addFrmNo: Checkbox{text:'Create subfolders'},\			} \			footer: Group {orientation:'row',alignChildren:['center','center']\				okBtn: Button{text:'RUN!',name:'run'}\				cnclBtn: Button{text:'CANCEL'}\			}\		}";		myPanel.grp = myPanel.add(res);		/////////////////////////////////////////////////////////////////////////////////////////////////		//		//	DEFAULTS and Functionality		//	Define default stuff for elements, window position and actions for buttons.		//	Input for this should be the variable that contains the panel with the res(resource string).		//	The functionality ofall elements is defined here as well.		//		/////////////////////////////////////////////////////////////////////////////////////////////////		function renderSettings(builder){ //what to render			var stillFrame = builder.rndrStngsPnl.stillFrm;			stillFrame.onClick = function(){renderSingleFrame=stillFrame.value;}		}		renderSettings(myPanel.grp);		////////////////////////////////////////////////////////////////////////////////////////////////		//		//	OUTPUT PANEL		//		- render destination		//		////////////////////////////////////////////////////////////////////////////////////////////////		function outputPanel(builder){ //render location settings. Needs panel containing res string as input			with (builder.outputPnl){				var useDefault = defOut.defOutBtn;				var useCustom = cstmOut.cstmOutBtn;				var setCustom = cstmOut.setCstmOut;				var customPath = cstmPth;				var renderLoc;				getProjectInfo();				//this part need better organizing. don't repeat yourself!				if(projectFile==false){					useDefault.onDraw = useDefault.value=false;					useCustom.onDraw = useCustom.value=true;					useDefault.onClick = function(){						getProjectInfo();						if(projectFile==false){							alert("Can't use default! \nSave the Project first. Default render folder will be created next to this project's saved location.")							useDefault.value = false;						}else{							useDefault.value = true;							useCustom.value = false;							customPath.text = setDefaultOutput();						}					}				}else{					useDefault.onDraw = useDefault.value=true;					customPath.onDraw = customPath.text = setDefaultOutput();					useDefault.onClick = function(){						if(projectFile==false){							alert("Can't use default! \nSave the Project first. Default render folder will be created next to this project's saved location.")							useDefault.value = false;						}else{							useDefault.value = true;							useCustom.value = false;							customPath.text = setDefaultOutput();						}					}				}				//...this part need better sorting. don't repeat yourself!				useCustom.onClick = function(){					customPath.text = renderLoc==undefined?'choose a location':renderLoc;					useDefault.value = false;}				setCustom.onClick = function(){					//paste function for choosing new file path					useCustom.value = true;					useDefault.value = false;					var set = setCustomOutput();					renderLoc=set==false?'choose a location':set;					customPath.text = renderLoc;				}				customPath.onChange = function(){					renderLoc = customPath.text;				}			}		}		outputPanel(myPanel.grp);		////////////////////////////////////////////////////////////////////////////////////////////////		//		//	CODEC AND FILE NAME SETTINGS		//		- create dropdown menu containing output module templates		//		////////////////////////////////////////////////////////////////////////////////////////////////		function outputModule(builder){			with(builder){				var menu = outputModPnl.outputModMenu;					menu.add('item','choose a template');				var del = false;				var newComp;				if(renderQ.numItems<1){ //Create a render queue item for AE to be able to list the OutputModule templates 					var newComp = app.project.items.addComp('xxxx_newComp',10,10,1,10,25);					renderQ.items.add(newComp);					del=true;				}				var OMtemplates = renderQ.item(1).outputModule(1).templates;				function listTemplates(){					for(i=0;i<OMtemplates.length;i++){						var curTemplate = OMtemplates[i];						var srch = curTemplate.search('_HIDDEN');	//check if the template is hidden to the UI...						if(!(srch>-1)){								//...if it is not hidden, add it to the list							menu.add('item',curTemplate);						}					}				}				listTemplates();				if(del==true){renderQ.item(renderQ.numItems).remove();}				if(newComp!=null){newComp.remove();}				menu.selection = menu.items[0];				menu.onChange = function(){outputModuleT = menu.selection}; //send outputmodule name to global variable (for index type 'selection.index'				}		}		outputModule(myPanel.grp);		////////////////////////////////////////////////////////////////////////////////////////////////		//		//	FOOTER		//		- double check everything and assign file name values etc.		//		- run the script		//		////////////////////////////////////////////////////////////////////////////////////////////////		function footer(builder){ //run+cancel buttons - takes 			builder.footer.okBtn.onClick = function(){				var thisComp = app.project.activeItem;				var renderLoc = builder.outputPnl.cstmPth.text;				var OMmenuText = builder.outputModPnl.outputModMenu.selection.toString();				if(getProjectInfo()==false && builder.outputPnl.defOut.defOutBtn.value==true){ //Changes to 'use Custom path', when user changes to non-saved project and has 'use default' selected					builder.outputPnl.defOut.defOutBtn.value = false;					builder.outputPnl.cstmOut.cstmOutBtn.value = true;					builder.outputPnl.cstmPth.text = 'choose a location';				};				renderMarkers.length = 0; //Resetting the renderMarkers array to fix the -12 out of range 0.00044 to 234234234 error				if(!(thisComp instanceof CompItem)){					alert('please select a composition first');				}else if(renderLoc==''||renderLoc=='choose a location'){					alert('Please set a valid output path before running.')				}else if(OMmenuText=='choose a template'){					alert('select an output module first');				}else{					app.beginUndoGroup('markers to render queue')					var append = builder.fileNomPnl.addFrmNo.value;					pseudoTimeline(); //make temp marker layer					housekeeping(); //read marker layer					if(builder.fileNomPnl.useCompNom.value==true){						addRenderItems(renderMarkers,append,renderLoc,thisComp.name)					}else{						addRenderItems(renderMarkers,append,renderLoc,); //input the marker's array as the first property(name)					}					while(!(thisComp.numLayers<1)){ //delete temp text layer						if(thisComp.layer(1).name=="#MARKER_INFO"){							try{								thisComp.layer(1).remove();							}catch(err){								//do nothing							}						}						else{							break;						}					}					app.endUndoGroup();				}			}		}		footer(myPanel.grp);		myPanel.layout.layout(true);		return myPanel;//contains all UI 'graphics' and control-functionality	}	//-----CREATE WINDOW-----//	var myScriptPal = build_ui(thisObj);	function runBuilder(builder){ //makes the UI/window visible on screen		if(builder !=null && builder instanceof Window){			builder.center();			builder.show();			renderMarkers.length = 0;			duration = 0;		}	}	runBuilder(thisObj);}if(prefs!=1){	alert('For the script to work properly you need to allow it to write files:\nPreferences>General>Allow Scripts To Write Files and Access Network')}/*else if(!(thisComp instanceof CompItem)){	alert('please select a composition first');}*/else{	//clearOutput(); //clears the info window console	userInterface(this);}}